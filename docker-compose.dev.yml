version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: devplugin-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: devplugin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d devplugin"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devplugin-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: devplugin-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: devplugin-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis

  # Main Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: devplugin-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      SERVER_PORT: 3000
      DATABASE_URL: postgresql://devuser:devpass@postgres:5432/devplugin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173
      MONITORING_ENABLED: "true"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/build
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "bun", "--print", "fetch('http://localhost:3000/api/health').then(r=>r.json()).then(j=>process.exit(j.status==='ok'?0:1))"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    command: ["bun", "run", "dev"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: devplugin-network