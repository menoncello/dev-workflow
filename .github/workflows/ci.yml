name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.3.1'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.1'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type checking
        run: bun run typecheck

      - name: Linting
        run: bun run lint:check

      - name: Format checking
        run: bun run format:check

      - name: Database schema generation
        run: bun run db:generate

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.1'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Run tests
        run: bun test --coverage

      - name: Upload coverage reports
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks

    strategy:
      matrix:
        environment: [dev, staging, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.1'

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            build
          key: ${{ runner.os }}-build-${{ matrix.environment }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.environment }}-
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma client
        run: bun run db:generate

      - name: Build ${{ matrix.environment }}
        run: bun run build:${{ matrix.environment }}

      - name: Analyze bundle size
        if: matrix.environment == 'production'
        run: |
          echo "Bundle size analysis:"
          ls -lh build/prod/src/index.js

          # Check if production bundle is under 1MB
          BUNDLE_SIZE=$(stat -c%s build/prod/src/index.js)
          MAX_SIZE=1048576  # 1MB in bytes

          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "❌ FAIL: Production bundle size $BUNDLE_SIZE bytes exceeds threshold $MAX_SIZE bytes"
            exit 1
          else
            echo "✅ PASS: Production bundle size $BUNDLE_SIZE bytes within threshold"
          fi

      - name: Check staging bundle size
        if: matrix.environment == 'staging'
        run: |
          echo "Staging bundle size analysis:"
          ls -lh build/staging/src/index.js

          # Check if staging bundle is under 2MB (allowing for source maps)
          BUNDLE_SIZE=$(stat -c%s build/staging/src/index.js)
          MAX_SIZE=2097152  # 2MB in bytes

          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "⚠️ WARNING: Staging bundle size $BUNDLE_SIZE bytes exceeds threshold $MAX_SIZE bytes"
            echo "Consider optimizing source maps for staging builds"
          else
            echo "✅ PASS: Staging bundle size $BUNDLE_SIZE bytes within threshold"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: build/${{ matrix.environment }}/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.1'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level moderate

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.3.1'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: build/prod/

      - name: Make production build executable
        run: chmod +x build/prod/src/index.js

      - name: Start application
        run: |
          cd build/prod
          NODE_ENV=production bun src/index.js &
          sleep 5

      - name: Health check
        run: |
          # Wait for app to start and perform health check
          timeout 30s bash -c 'until curl -f http://localhost:3000/api/v1/system/health; do sleep 2; done'

      - name: Load test
        run: |
          # Basic load test using curl
          echo "Running basic load test..."
          for i in {1..10}; do
            curl -f http://localhost:3000/api/v1/system/health || {
              echo "❌ Health check failed during load test"
              exit 1
            }
          done
          echo "✅ Load test passed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, performance-test]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "✅ All checks passed!"
          echo "Pipeline completed successfully"

      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed!"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Security scan result: ${{ needs.security-scan.result }}"
          exit 1