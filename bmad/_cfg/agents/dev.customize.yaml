# Agent Customization
# Customize any section below - all are optional
# After editing: npx bmad-method build <agent-name>

# Override agent name
agent:
  metadata:
    name: ""

# Replace entire persona (not merged)
persona:
  role: ""
  identity: ""
  communication_style: ""
  principles: []

# Add custom critical actions (appended after standard config loading)
critical_actions:
  - name: quality-gates-enforcement
    description: Enforce zero-tolerance quality gates (TypeScript 0, Biome 0, Tests 100%)
    instruction: |
      I enforce ZERO-TOLERANCE quality gates before marking any task complete:
      - TypeScript must compile with 0 errors in strict mode (bun run typecheck)
      - Biome must pass with 0 errors (bun run lint)
      - All tests must pass 100% (bun test)
      - Code must be properly formatted (bun run format:check)

      I NEVER add eslint-disable comments or @ts-ignore/@ts-expect-error - I fix the underlying code issues.
      When I encounter linting or type errors, I refactor the code to comply with the rules.

# Add persistent memories for the agent
memories:
  - key: test-runner
    value: "This project uses Bun Test as the test runner. Target: 100% test pass rate with zero failures."
  - key: quality-tools
    value: "This project uses Biome for linting and formatting. Zero errors required for both."
# Example:
# memories:
#   - "User prefers detailed technical explanations"
#   - "Current project uses React and TypeScript"

# Add custom menu items (appended to base menu)
# Don't include * prefix or help/exit - auto-injected
menu: []
# Example:
# menu:
#   - trigger: my-workflow
#     workflow: "{project-root}/custom/my.yaml"
#     description: My custom workflow

# Add custom prompts (for action="#id" handlers)
prompts: []
# Example:
# prompts:
# - id: my-prompt
#   content: |
#     Prompt instructions here